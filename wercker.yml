services:
  - mongo
build:
  box: golang
  steps:
    - wercker/golint
    # Test the project
    - script:
        name: Unit tests
        code: go test -v ./service    
    - internal/docker-build: 
        dockerfile: Dockerfile 
        image-name: my-new-image # name used to refer to this image until it's pushed   
    - internal/docker-run:
        image: my-new-image
        name: myTestContainer     
    - script: 
        name: Test the container
        code: |
            if curlOutput=`curl -s myTestContainer:8000/test`; then 
            echo $curlOutput   
            fi  
    - internal/docker-kill:
        name: myTestContainer               
    - internal/docker-push:
        username: $USERNAME
        password: $PASSWORD
        port: "8000"
        tag: latest
        repository: sankara98/gogo-service
        registry: https://registry.hub.docker.com

integration-tests:
  box: golang
  services: 
    - mongo
  steps:
    - script:
        name: go get
        code: |
          cd $WERCKER_SOURCE_DIR
          go version
          go get -u github.com/Masterminds/glide
          go get -u github.com/cloudnativego/cf-tools/vcapinate
          export PATH=$WERCKER_SOURCE_DIR/bin:$PATH
          glide install
    - script:
        name: build
        code: |
          go build ./...
    - script:
        name: mongo integration test
        code: |
         export VCAP_SERVICES=`vcapinate -path=./integrations/vcap.yml`
         export VCAP_APPLICATION={}
         godep go test ./integrations/_test -v -race


unit-test:
  box: golang
  steps:
   - script:
        name: go build
        code: |
          go build ./...
  steps:
    - script:
        name: gogo service unit test
        code: |
          go test -v ./service


